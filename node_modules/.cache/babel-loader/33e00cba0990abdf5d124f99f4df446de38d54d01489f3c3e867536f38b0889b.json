{"ast":null,"code":"import { promisify } from 'node:util';\nimport process from 'node:process';\nimport { execFile } from 'node:child_process';\nimport defaultBrowserId from 'default-browser-id';\nimport bundleName from 'bundle-name';\nimport windows from './windows.js';\nconst execFileAsync = promisify(execFile);\n\n// Inlined: https://github.com/sindresorhus/titleize/blob/main/index.js\nconst titleize = string => string.toLowerCase().replaceAll(/(?:^|\\s|-)\\S/g, x => x.toUpperCase());\nexport default async function defaultBrowser() {\n  if (process.platform === 'darwin') {\n    const id = await defaultBrowserId();\n    const name = await bundleName(id);\n    return {\n      name,\n      id\n    };\n  }\n  if (process.platform === 'linux') {\n    const {\n      stdout\n    } = await execFileAsync('xdg-mime', ['query', 'default', 'x-scheme-handler/http']);\n    const name = titleize(stdout.trim().replace(/.desktop$/, '').replace('-', ' '));\n    return {\n      name,\n      id: stdout\n    };\n  }\n  if (process.platform === 'win32') {\n    return windows();\n  }\n  throw new Error('Only macOS, Linux, and Windows are supported');\n}","map":{"version":3,"names":["promisify","process","execFile","defaultBrowserId","bundleName","windows","execFileAsync","titleize","string","toLowerCase","replaceAll","x","toUpperCase","defaultBrowser","platform","id","name","stdout","trim","replace","Error"],"sources":["C:/Users/HarshitSrivastava/Desktop/Practice/React/Project2/my-app/node_modules/default-browser/index.js"],"sourcesContent":["import {promisify} from 'node:util';\nimport process from 'node:process';\nimport {execFile} from 'node:child_process';\nimport defaultBrowserId from 'default-browser-id';\nimport bundleName from 'bundle-name';\nimport windows from './windows.js';\n\nconst execFileAsync = promisify(execFile);\n\n// Inlined: https://github.com/sindresorhus/titleize/blob/main/index.js\nconst titleize = string => string.toLowerCase().replaceAll(/(?:^|\\s|-)\\S/g, x => x.toUpperCase());\n\nexport default async function defaultBrowser() {\n\tif (process.platform === 'darwin') {\n\t\tconst id = await defaultBrowserId();\n\t\tconst name = await bundleName(id);\n\t\treturn {name, id};\n\t}\n\n\tif (process.platform === 'linux') {\n\t\tconst {stdout} = await execFileAsync('xdg-mime', ['query', 'default', 'x-scheme-handler/http']);\n\t\tconst name = titleize(stdout.trim().replace(/.desktop$/, '').replace('-', ' '));\n\n\t\treturn {\n\t\t\tname,\n\t\t\tid: stdout,\n\t\t};\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn windows();\n\t}\n\n\tthrow new Error('Only macOS, Linux, and Windows are supported');\n}\n"],"mappings":"AAAA,SAAQA,SAAS,QAAO,WAAW;AACnC,OAAOC,OAAO,MAAM,cAAc;AAClC,SAAQC,QAAQ,QAAO,oBAAoB;AAC3C,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,OAAO,MAAM,cAAc;AAElC,MAAMC,aAAa,GAAGN,SAAS,CAACE,QAAQ,CAAC;;AAEzC;AACA,MAAMK,QAAQ,GAAGC,MAAM,IAAIA,MAAM,CAACC,WAAW,CAAC,CAAC,CAACC,UAAU,CAAC,eAAe,EAAEC,CAAC,IAAIA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;AAEjG,eAAe,eAAeC,cAAcA,CAAA,EAAG;EAC9C,IAAIZ,OAAO,CAACa,QAAQ,KAAK,QAAQ,EAAE;IAClC,MAAMC,EAAE,GAAG,MAAMZ,gBAAgB,CAAC,CAAC;IACnC,MAAMa,IAAI,GAAG,MAAMZ,UAAU,CAACW,EAAE,CAAC;IACjC,OAAO;MAACC,IAAI;MAAED;IAAE,CAAC;EAClB;EAEA,IAAId,OAAO,CAACa,QAAQ,KAAK,OAAO,EAAE;IACjC,MAAM;MAACG;IAAM,CAAC,GAAG,MAAMX,aAAa,CAAC,UAAU,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,uBAAuB,CAAC,CAAC;IAC/F,MAAMU,IAAI,GAAGT,QAAQ,CAACU,MAAM,CAACC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAE/E,OAAO;MACNH,IAAI;MACJD,EAAE,EAAEE;IACL,CAAC;EACF;EAEA,IAAIhB,OAAO,CAACa,QAAQ,KAAK,OAAO,EAAE;IACjC,OAAOT,OAAO,CAAC,CAAC;EACjB;EAEA,MAAM,IAAIe,KAAK,CAAC,8CAA8C,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}