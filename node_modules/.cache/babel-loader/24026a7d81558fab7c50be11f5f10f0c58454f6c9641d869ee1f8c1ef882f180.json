{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = void 0;\nconst constants_1 = require(\"./constants\");\nconst {\n  S_IFMT,\n  S_IFDIR,\n  S_IFREG,\n  S_IFBLK,\n  S_IFCHR,\n  S_IFLNK,\n  S_IFIFO,\n  S_IFSOCK\n} = constants_1.constants;\n/**\n * Statistics about a file/directory, like `fs.Stats`.\n */\nclass Stats {\n  static build(node, bigint = false) {\n    const stats = new Stats();\n    const {\n      uid,\n      gid,\n      atime,\n      mtime,\n      ctime\n    } = node;\n    const getStatNumber = !bigint ? number => number : number => BigInt(number);\n    // Copy all values on Stats from Node, so that if Node values\n    // change, values on Stats would still be the old ones,\n    // just like in Node fs.\n    stats.uid = getStatNumber(uid);\n    stats.gid = getStatNumber(gid);\n    stats.rdev = getStatNumber(0);\n    stats.blksize = getStatNumber(4096);\n    stats.ino = getStatNumber(node.ino);\n    stats.size = getStatNumber(node.getSize());\n    stats.blocks = getStatNumber(1);\n    stats.atime = atime;\n    stats.mtime = mtime;\n    stats.ctime = ctime;\n    stats.birthtime = ctime;\n    stats.atimeMs = getStatNumber(atime.getTime());\n    stats.mtimeMs = getStatNumber(mtime.getTime());\n    const ctimeMs = getStatNumber(ctime.getTime());\n    stats.ctimeMs = ctimeMs;\n    stats.birthtimeMs = ctimeMs;\n    if (bigint) {\n      stats.atimeNs = BigInt(atime.getTime()) * BigInt(1000000);\n      stats.mtimeNs = BigInt(mtime.getTime()) * BigInt(1000000);\n      const ctimeNs = BigInt(ctime.getTime()) * BigInt(1000000);\n      stats.ctimeNs = ctimeNs;\n      stats.birthtimeNs = ctimeNs;\n    }\n    stats.dev = getStatNumber(0);\n    stats.mode = getStatNumber(node.mode);\n    stats.nlink = getStatNumber(node.nlink);\n    return stats;\n  }\n  _checkModeProperty(property) {\n    return (Number(this.mode) & S_IFMT) === property;\n  }\n  isDirectory() {\n    return this._checkModeProperty(S_IFDIR);\n  }\n  isFile() {\n    return this._checkModeProperty(S_IFREG);\n  }\n  isBlockDevice() {\n    return this._checkModeProperty(S_IFBLK);\n  }\n  isCharacterDevice() {\n    return this._checkModeProperty(S_IFCHR);\n  }\n  isSymbolicLink() {\n    return this._checkModeProperty(S_IFLNK);\n  }\n  isFIFO() {\n    return this._checkModeProperty(S_IFIFO);\n  }\n  isSocket() {\n    return this._checkModeProperty(S_IFSOCK);\n  }\n}\nexports.Stats = Stats;\nexports.default = Stats;","map":{"version":3,"names":["constants_1","require","S_IFMT","S_IFDIR","S_IFREG","S_IFBLK","S_IFCHR","S_IFLNK","S_IFIFO","S_IFSOCK","constants","Stats","build","node","bigint","stats","uid","gid","atime","mtime","ctime","getStatNumber","number","BigInt","rdev","blksize","ino","size","getSize","blocks","birthtime","atimeMs","getTime","mtimeMs","ctimeMs","birthtimeMs","atimeNs","mtimeNs","ctimeNs","birthtimeNs","dev","mode","nlink","_checkModeProperty","property","Number","isDirectory","isFile","isBlockDevice","isCharacterDevice","isSymbolicLink","isFIFO","isSocket","exports","default"],"sources":["../src/Stats.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}