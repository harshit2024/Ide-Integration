{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newNotAllowedError = exports.newTypeMismatchError = exports.newNotFoundError = exports.assertCanWrite = exports.assertName = exports.basename = exports.ctx = void 0;\n/**\n * Creates a new {@link NodeFsaContext}.\n */\nconst ctx = (partial = {}) => {\n  return Object.assign({\n    separator: '/',\n    syncHandleAllowed: false,\n    mode: 'read'\n  }, partial);\n};\nexports.ctx = ctx;\nconst basename = (path, separator) => {\n  if (path[path.length - 1] === separator) path = path.slice(0, -1);\n  const lastSlashIndex = path.lastIndexOf(separator);\n  return lastSlashIndex === -1 ? path : path.slice(lastSlashIndex + 1);\n};\nexports.basename = basename;\nconst nameRegex = /^(\\.{1,2})|(.*(\\/|\\\\).*)$/;\nconst assertName = (name, method, klass) => {\n  const isInvalid = !name || nameRegex.test(name);\n  if (isInvalid) throw new TypeError(`Failed to execute '${method}' on '${klass}': Name is not allowed.`);\n};\nexports.assertName = assertName;\nconst assertCanWrite = mode => {\n  if (mode !== 'readwrite') throw new DOMException('The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError');\n};\nexports.assertCanWrite = assertCanWrite;\nconst newNotFoundError = () => new DOMException('A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError');\nexports.newNotFoundError = newNotFoundError;\nconst newTypeMismatchError = () => new DOMException('The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError');\nexports.newTypeMismatchError = newTypeMismatchError;\nconst newNotAllowedError = () => new DOMException('Permission not granted.', 'NotAllowedError');\nexports.newNotAllowedError = newNotAllowedError;","map":{"version":3,"names":["ctx","partial","Object","assign","separator","syncHandleAllowed","mode","exports","basename","path","length","slice","lastSlashIndex","lastIndexOf","nameRegex","assertName","name","method","klass","isInvalid","test","TypeError","assertCanWrite","DOMException","newNotFoundError","newTypeMismatchError","newNotAllowedError"],"sources":["../../src/node-to-fsa/util.ts"],"sourcesContent":[null],"mappings":";;;;;;AAEA;;;AAGO,MAAMA,GAAG,GAAGA,CAACC,OAAA,GAAmC,EAAE,KAAoB;EAC3E,OAAAC,MAAA,CAAAC,MAAA;IACEC,SAAS,EAAE,GAAG;IACdC,iBAAiB,EAAE,KAAK;IACxBC,IAAI,EAAE;EAAM,GACTL,OAAO;AAEd,CAAC;AAPYM,OAAA,CAAAP,GAAG,GAAAA,GAAA;AAST,MAAMQ,QAAQ,GAAGA,CAACC,IAAY,EAAEL,SAAiB,KAAI;EAC1D,IAAIK,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,KAAKN,SAAS,EAAEK,IAAI,GAAGA,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACjE,MAAMC,cAAc,GAAGH,IAAI,CAACI,WAAW,CAACT,SAAS,CAAC;EAClD,OAAOQ,cAAc,KAAK,CAAC,CAAC,GAAGH,IAAI,GAAGA,IAAI,CAACE,KAAK,CAACC,cAAc,GAAG,CAAC,CAAC;AACtE,CAAC;AAJYL,OAAA,CAAAC,QAAQ,GAAAA,QAAA;AAMrB,MAAMM,SAAS,GAAG,2BAA2B;AAEtC,MAAMC,UAAU,GAAGA,CAACC,IAAY,EAAEC,MAAc,EAAEC,KAAa,KAAI;EACxE,MAAMC,SAAS,GAAG,CAACH,IAAI,IAAIF,SAAS,CAACM,IAAI,CAACJ,IAAI,CAAC;EAC/C,IAAIG,SAAS,EAAE,MAAM,IAAIE,SAAS,CAAC,sBAAsBJ,MAAM,SAASC,KAAK,yBAAyB,CAAC;AACzG,CAAC;AAHYX,OAAA,CAAAQ,UAAU,GAAAA,UAAA;AAKhB,MAAMO,cAAc,GAAIhB,IAA0B,IAAI;EAC3D,IAAIA,IAAI,KAAK,WAAW,EACtB,MAAM,IAAIiB,YAAY,CACpB,sFAAsF,EACtF,iBAAiB,CAClB;AACL,CAAC;AANYhB,OAAA,CAAAe,cAAc,GAAAA,cAAA;AAQpB,MAAME,gBAAgB,GAAGA,CAAA,KAC9B,IAAID,YAAY,CACd,0FAA0F,EAC1F,eAAe,CAChB;AAJUhB,OAAA,CAAAiB,gBAAgB,GAAAA,gBAAA;AAMtB,MAAMC,oBAAoB,GAAGA,CAAA,KAClC,IAAIF,YAAY,CAAC,mEAAmE,EAAE,mBAAmB,CAAC;AAD/FhB,OAAA,CAAAkB,oBAAoB,GAAAA,oBAAA;AAG1B,MAAMC,kBAAkB,GAAGA,CAAA,KAAM,IAAIH,YAAY,CAAC,yBAAyB,EAAE,iBAAiB,CAAC;AAAzFhB,OAAA,CAAAmB,kBAAkB,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}