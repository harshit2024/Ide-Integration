{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FLAGS = exports.ERRSTR = void 0;\nconst constants_1 = require(\"../constants\");\nexports.ERRSTR = {\n  PATH_STR: 'path must be a string or Buffer',\n  // FD:             'file descriptor must be a unsigned 32-bit integer',\n  FD: 'fd must be a file descriptor',\n  MODE_INT: 'mode must be an int',\n  CB: 'callback must be a function',\n  UID: 'uid must be an unsigned int',\n  GID: 'gid must be an unsigned int',\n  LEN: 'len must be an integer',\n  ATIME: 'atime must be an integer',\n  MTIME: 'mtime must be an integer',\n  PREFIX: 'filename prefix is required',\n  BUFFER: 'buffer must be an instance of Buffer or StaticBuffer',\n  OFFSET: 'offset must be an integer',\n  LENGTH: 'length must be an integer',\n  POSITION: 'position must be an integer'\n};\nconst {\n  O_RDONLY,\n  O_WRONLY,\n  O_RDWR,\n  O_CREAT,\n  O_EXCL,\n  O_TRUNC,\n  O_APPEND,\n  O_SYNC\n} = constants_1.constants;\n// List of file `flags` as defined by Node.\nvar FLAGS;\n(function (FLAGS) {\n  // Open file for reading. An exception occurs if the file does not exist.\n  FLAGS[FLAGS[\"r\"] = O_RDONLY] = \"r\";\n  // Open file for reading and writing. An exception occurs if the file does not exist.\n  FLAGS[FLAGS[\"r+\"] = O_RDWR] = \"r+\";\n  // Open file for reading in synchronous mode. Instructs the operating system to bypass the local file system cache.\n  FLAGS[FLAGS[\"rs\"] = O_RDONLY | O_SYNC] = \"rs\";\n  FLAGS[FLAGS[\"sr\"] = FLAGS.rs] = \"sr\";\n  // Open file for reading and writing, telling the OS to open it synchronously. See notes for 'rs' about using this with caution.\n  FLAGS[FLAGS[\"rs+\"] = O_RDWR | O_SYNC] = \"rs+\";\n  FLAGS[FLAGS[\"sr+\"] = FLAGS['rs+']] = \"sr+\";\n  // Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n  FLAGS[FLAGS[\"w\"] = O_WRONLY | O_CREAT | O_TRUNC] = \"w\";\n  // Like 'w' but fails if path exists.\n  FLAGS[FLAGS[\"wx\"] = O_WRONLY | O_CREAT | O_TRUNC | O_EXCL] = \"wx\";\n  FLAGS[FLAGS[\"xw\"] = FLAGS.wx] = \"xw\";\n  // Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n  FLAGS[FLAGS[\"w+\"] = O_RDWR | O_CREAT | O_TRUNC] = \"w+\";\n  // Like 'w+' but fails if path exists.\n  FLAGS[FLAGS[\"wx+\"] = O_RDWR | O_CREAT | O_TRUNC | O_EXCL] = \"wx+\";\n  FLAGS[FLAGS[\"xw+\"] = FLAGS['wx+']] = \"xw+\";\n  // Open file for appending. The file is created if it does not exist.\n  FLAGS[FLAGS[\"a\"] = O_WRONLY | O_APPEND | O_CREAT] = \"a\";\n  // Like 'a' but fails if path exists.\n  FLAGS[FLAGS[\"ax\"] = O_WRONLY | O_APPEND | O_CREAT | O_EXCL] = \"ax\";\n  FLAGS[FLAGS[\"xa\"] = FLAGS.ax] = \"xa\";\n  // Open file for reading and appending. The file is created if it does not exist.\n  FLAGS[FLAGS[\"a+\"] = O_RDWR | O_APPEND | O_CREAT] = \"a+\";\n  // Like 'a+' but fails if path exists.\n  FLAGS[FLAGS[\"ax+\"] = O_RDWR | O_APPEND | O_CREAT | O_EXCL] = \"ax+\";\n  FLAGS[FLAGS[\"xa+\"] = FLAGS['ax+']] = \"xa+\";\n})(FLAGS || (exports.FLAGS = FLAGS = {}));","map":{"version":3,"names":["constants_1","require","exports","ERRSTR","PATH_STR","FD","MODE_INT","CB","UID","GID","LEN","ATIME","MTIME","PREFIX","BUFFER","OFFSET","LENGTH","POSITION","O_RDONLY","O_WRONLY","O_RDWR","O_CREAT","O_EXCL","O_TRUNC","O_APPEND","O_SYNC","constants","FLAGS","rs","wx","ax"],"sources":["../../src/node/constants.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,WAAA,GAAAC,OAAA;AASaC,OAAA,CAAAC,MAAM,GAAG;EACpBC,QAAQ,EAAE,iCAAiC;EAC3C;EACAC,EAAE,EAAE,8BAA8B;EAClCC,QAAQ,EAAE,qBAAqB;EAC/BC,EAAE,EAAE,6BAA6B;EACjCC,GAAG,EAAE,6BAA6B;EAClCC,GAAG,EAAE,6BAA6B;EAClCC,GAAG,EAAE,wBAAwB;EAC7BC,KAAK,EAAE,0BAA0B;EACjCC,KAAK,EAAE,0BAA0B;EACjCC,MAAM,EAAE,6BAA6B;EACrCC,MAAM,EAAE,sDAAsD;EAC9DC,MAAM,EAAE,2BAA2B;EACnCC,MAAM,EAAE,2BAA2B;EACnCC,QAAQ,EAAE;CACX;AAED,MAAM;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,MAAM;EAAEC,OAAO;EAAEC,MAAM;EAAEC,OAAO;EAAEC,QAAQ;EAAEC;AAAM,CAAE,GAAGzB,WAAA,CAAA0B,SAAS;AAE5F;AACA,IAAYC,KA+BX;AA/BD,WAAYA,KAAK;EACf;EACAA,KAAA,CAAAA,KAAA,QAAIT,QAAQ;EACZ;EACAS,KAAA,CAAAA,KAAA,SAAOP,MAAM;EACb;EACAO,KAAA,CAAAA,KAAA,SAAKT,QAAQ,GAAGO,MAAM;EACtBE,KAAA,CAAAA,KAAA,SAAKA,KAAK,CAACC,EAAE;EACb;EACAD,KAAA,CAAAA,KAAA,UAAQP,MAAM,GAAGK,MAAM;EACvBE,KAAA,CAAAA,KAAA,UAAQA,KAAK,CAAC,KAAK,CAAC;EACpB;EACAA,KAAA,CAAAA,KAAA,QAAIR,QAAQ,GAAGE,OAAO,GAAGE,OAAO;EAChC;EACAI,KAAA,CAAAA,KAAA,SAAKR,QAAQ,GAAGE,OAAO,GAAGE,OAAO,GAAGD,MAAM;EAC1CK,KAAA,CAAAA,KAAA,SAAKA,KAAK,CAACE,EAAE;EACb;EACAF,KAAA,CAAAA,KAAA,SAAOP,MAAM,GAAGC,OAAO,GAAGE,OAAO;EACjC;EACAI,KAAA,CAAAA,KAAA,UAAQP,MAAM,GAAGC,OAAO,GAAGE,OAAO,GAAGD,MAAM;EAC3CK,KAAA,CAAAA,KAAA,UAAQA,KAAK,CAAC,KAAK,CAAC;EACpB;EACAA,KAAA,CAAAA,KAAA,QAAIR,QAAQ,GAAGK,QAAQ,GAAGH,OAAO;EACjC;EACAM,KAAA,CAAAA,KAAA,SAAKR,QAAQ,GAAGK,QAAQ,GAAGH,OAAO,GAAGC,MAAM;EAC3CK,KAAA,CAAAA,KAAA,SAAKA,KAAK,CAACG,EAAE;EACb;EACAH,KAAA,CAAAA,KAAA,SAAOP,MAAM,GAAGI,QAAQ,GAAGH,OAAO;EAClC;EACAM,KAAA,CAAAA,KAAA,UAAQP,MAAM,GAAGI,QAAQ,GAAGH,OAAO,GAAGC,MAAM;EAC5CK,KAAA,CAAAA,KAAA,UAAQA,KAAK,CAAC,KAAK,CAAC;AACtB,CAAC,EA/BWA,KAAK,KAAAzB,OAAA,CAAAyB,KAAA,GAALA,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}