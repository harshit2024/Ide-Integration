{"ast":null,"code":"/*\n * URL: https://github.com/cubicdaiya/onp\n *\n * Copyright (c) 2013 Tatsuhiko Kubo <cubicdaiya@gmail.com>\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n/**\n * The algorithm implemented here is based on \"An O(NP) Sequence Comparison Algorithm\"\n * by described by Sun Wu, Udi Manber and Gene Myers\n*/\nmodule.exports = function (a_, b_) {\n  var a = a_,\n    b = b_,\n    m = a.length,\n    n = b.length,\n    reverse = false,\n    ed = null,\n    offset = m + 1,\n    path = [],\n    pathposi = [],\n    ses = [],\n    lcs = \"\",\n    SES_DELETE = -1,\n    SES_COMMON = 0,\n    SES_ADD = 1;\n  var tmp1, tmp2;\n  var init = function () {\n    if (m >= n) {\n      tmp1 = a;\n      tmp2 = m;\n      a = b;\n      b = tmp1;\n      m = n;\n      n = tmp2;\n      reverse = true;\n      offset = m + 1;\n    }\n  };\n  var P = function (x, y, k) {\n    return {\n      'x': x,\n      'y': y,\n      'k': k\n    };\n  };\n  var seselem = function (elem, t) {\n    return {\n      'elem': elem,\n      't': t\n    };\n  };\n  var snake = function (k, p, pp) {\n    var r, x, y;\n    if (p > pp) {\n      r = path[k - 1 + offset];\n    } else {\n      r = path[k + 1 + offset];\n    }\n    y = Math.max(p, pp);\n    x = y - k;\n    while (x < m && y < n && a[x] === b[y]) {\n      ++x;\n      ++y;\n    }\n    path[k + offset] = pathposi.length;\n    pathposi[pathposi.length] = new P(x, y, r);\n    return y;\n  };\n  var recordseq = function (epc) {\n    var x_idx, y_idx, px_idx, py_idx, i;\n    x_idx = y_idx = 1;\n    px_idx = py_idx = 0;\n    for (i = epc.length - 1; i >= 0; --i) {\n      while (px_idx < epc[i].x || py_idx < epc[i].y) {\n        if (epc[i].y - epc[i].x > py_idx - px_idx) {\n          if (reverse) {\n            ses[ses.length] = new seselem(b[py_idx], SES_DELETE);\n          } else {\n            ses[ses.length] = new seselem(b[py_idx], SES_ADD);\n          }\n          ++y_idx;\n          ++py_idx;\n        } else if (epc[i].y - epc[i].x < py_idx - px_idx) {\n          if (reverse) {\n            ses[ses.length] = new seselem(a[px_idx], SES_ADD);\n          } else {\n            ses[ses.length] = new seselem(a[px_idx], SES_DELETE);\n          }\n          ++x_idx;\n          ++px_idx;\n        } else {\n          ses[ses.length] = new seselem(a[px_idx], SES_COMMON);\n          lcs += a[px_idx];\n          ++x_idx;\n          ++y_idx;\n          ++px_idx;\n          ++py_idx;\n        }\n      }\n    }\n  };\n  init();\n  return {\n    SES_DELETE: -1,\n    SES_COMMON: 0,\n    SES_ADD: 1,\n    editdistance: function () {\n      return ed;\n    },\n    getlcs: function () {\n      return lcs;\n    },\n    getses: function () {\n      return ses;\n    },\n    compose: function () {\n      var delta, size, fp, p, r, epc, i, k;\n      delta = n - m;\n      size = m + n + 3;\n      fp = {};\n      for (i = 0; i < size; ++i) {\n        fp[i] = -1;\n        path[i] = -1;\n      }\n      p = -1;\n      do {\n        ++p;\n        for (k = -p; k <= delta - 1; ++k) {\n          fp[k + offset] = snake(k, fp[k - 1 + offset] + 1, fp[k + 1 + offset]);\n        }\n        for (k = delta + p; k >= delta + 1; --k) {\n          fp[k + offset] = snake(k, fp[k - 1 + offset] + 1, fp[k + 1 + offset]);\n        }\n        fp[delta + offset] = snake(delta, fp[delta - 1 + offset] + 1, fp[delta + 1 + offset]);\n      } while (fp[delta + offset] !== n);\n      ed = delta + 2 * p;\n      r = path[delta + offset];\n      epc = [];\n      while (r !== -1) {\n        epc[epc.length] = new P(pathposi[r].x, pathposi[r].y, null);\n        r = pathposi[r].k;\n      }\n      recordseq(epc);\n    }\n  };\n};","map":{"version":3,"names":["module","exports","a_","b_","a","b","m","length","n","reverse","ed","offset","path","pathposi","ses","lcs","SES_DELETE","SES_COMMON","SES_ADD","tmp1","tmp2","init","P","x","y","k","seselem","elem","t","snake","p","pp","r","Math","max","recordseq","epc","x_idx","y_idx","px_idx","py_idx","i","editdistance","getlcs","getses","compose","delta","size","fp"],"sources":["C:/Users/HarshitSrivastava/Desktop/Practice/React/Project2/my-app/node_modules/diff3/onp.js"],"sourcesContent":["/*\n * URL: https://github.com/cubicdaiya/onp\n *\n * Copyright (c) 2013 Tatsuhiko Kubo <cubicdaiya@gmail.com>\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n/**\n * The algorithm implemented here is based on \"An O(NP) Sequence Comparison Algorithm\"\n * by described by Sun Wu, Udi Manber and Gene Myers\n*/\nmodule.exports = function (a_, b_) {\n    var a          = a_,\n        b          = b_,\n        m          = a.length,\n        n          = b.length,\n        reverse    = false,\n        ed         = null,\n        offset     = m + 1,\n        path       = [],\n        pathposi   = [],\n        ses        = [],\n        lcs        = \"\",\n        SES_DELETE = -1,\n        SES_COMMON = 0,\n        SES_ADD    = 1;\n\n    var tmp1,\n        tmp2;\n\n    var init = function () {\n        if (m >= n) {\n            tmp1    = a;\n            tmp2    = m;\n            a       = b;\n            b       = tmp1;\n            m       = n;\n            n       = tmp2;\n            reverse = true;\n            offset = m + 1;\n        }\n    };\n\n    var P = function (x, y, k) {\n        return {\n            'x' : x,\n            'y' : y,\n            'k' : k,\n        };\n    };\n\n    var seselem = function (elem, t) {\n        return {\n            'elem' : elem,\n            't'    : t,\n        };\n    };\n\n    var snake = function (k, p, pp) {\n        var r, x, y;\n        if (p > pp) {\n            r = path[k-1+offset];\n        } else {\n            r = path[k+1+offset];\n        }\n\n        y = Math.max(p, pp);\n        x = y - k;\n        while (x < m && y < n && a[x] === b[y]) {\n            ++x;\n            ++y;\n        }\n\n        path[k+offset] = pathposi.length;\n        pathposi[pathposi.length] = new P(x, y, r);\n        return y;\n    };\n\n    var recordseq = function (epc) {\n        var x_idx, y_idx, px_idx, py_idx, i;\n        x_idx  = y_idx  = 1;\n        px_idx = py_idx = 0;\n        for (i=epc.length-1;i>=0;--i) {\n            while(px_idx < epc[i].x || py_idx < epc[i].y) {\n                if (epc[i].y - epc[i].x > py_idx - px_idx) {\n                    if (reverse) {\n                        ses[ses.length] = new seselem(b[py_idx], SES_DELETE);\n                    } else {\n                        ses[ses.length] = new seselem(b[py_idx], SES_ADD);\n                    }\n                    ++y_idx;\n                    ++py_idx;\n                } else if (epc[i].y - epc[i].x < py_idx - px_idx) {\n                    if (reverse) {\n                        ses[ses.length] = new seselem(a[px_idx], SES_ADD);\n                    } else {\n                        ses[ses.length] = new seselem(a[px_idx], SES_DELETE);\n                    }\n                    ++x_idx;\n                    ++px_idx;\n                } else {\n                    ses[ses.length] = new seselem(a[px_idx], SES_COMMON);\n                    lcs += a[px_idx];\n                    ++x_idx;\n                    ++y_idx;\n                    ++px_idx;\n                    ++py_idx;\n                }\n            }\n        }\n    };\n\n    init();\n\n    return {\n        SES_DELETE : -1,\n        SES_COMMON :  0,\n        SES_ADD    :  1,\n        editdistance : function () {\n            return ed;\n        },\n        getlcs : function () {\n            return lcs;\n        },\n        getses : function () {\n            return ses;\n        },\n        compose : function () {\n            var delta, size, fp, p, r, epc, i, k;\n            delta  = n - m;\n            size   = m + n + 3;\n            fp     = {};\n            for (i=0;i<size;++i) {\n                fp[i] = -1;\n                path[i] = -1;\n            }\n            p = -1;\n            do {\n                ++p;\n                for (k=-p;k<=delta-1;++k) {\n                    fp[k+offset] = snake(k, fp[k-1+offset]+1, fp[k+1+offset]);\n                }\n                for (k=delta+p;k>=delta+1;--k) {\n                    fp[k+offset] = snake(k, fp[k-1+offset]+1, fp[k+1+offset]);\n                }\n                fp[delta+offset] = snake(delta, fp[delta-1+offset]+1, fp[delta+1+offset]);\n            } while (fp[delta+offset] !== n);\n\n            ed = delta + 2 * p;\n\n            r = path[delta+offset];\n\n            epc  = [];\n            while (r !== -1) {\n                epc[epc.length] = new P(pathposi[r].x, pathposi[r].y, null);\n                r = pathposi[r].k;\n            }\n            recordseq(epc);\n        }\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}