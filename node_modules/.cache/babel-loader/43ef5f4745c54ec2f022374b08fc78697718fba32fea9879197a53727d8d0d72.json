{"ast":null,"code":"import process from 'node:process';\nimport { Buffer } from 'node:buffer';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport childProcess from 'node:child_process';\nimport fs, { constants as fsConstants } from 'node:fs/promises';\nimport isWsl from 'is-wsl';\nimport defineLazyProperty from 'define-lazy-prop';\nimport defaultBrowser from 'default-browser';\nimport isInsideContainer from 'is-inside-container';\n\n// Path to included `xdg-open`.\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\nconst {\n  platform,\n  arch\n} = process;\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n  // Default value for \"root\" param\n  // according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n  const defaultMountPoint = '/mnt/';\n  let mountPoint;\n  return async function () {\n    if (mountPoint) {\n      // Return memoized mount point value\n      return mountPoint;\n    }\n    const configFilePath = '/etc/wsl.conf';\n    let isConfigFileExists = false;\n    try {\n      await fs.access(configFilePath, fsConstants.F_OK);\n      isConfigFileExists = true;\n    } catch {}\n    if (!isConfigFileExists) {\n      return defaultMountPoint;\n    }\n    const configContent = await fs.readFile(configFilePath, {\n      encoding: 'utf8'\n    });\n    const configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n    if (!configMountPoint) {\n      return defaultMountPoint;\n    }\n    mountPoint = configMountPoint.groups.mountPoint.trim();\n    mountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n    return mountPoint;\n  };\n})();\nconst pTryEach = async (array, mapper) => {\n  let latestError;\n  for (const item of array) {\n    try {\n      return await mapper(item); // eslint-disable-line no-await-in-loop\n    } catch (error) {\n      latestError = error;\n    }\n  }\n  throw latestError;\n};\nconst baseOpen = async options => {\n  options = {\n    wait: false,\n    background: false,\n    newInstance: false,\n    allowNonzeroExitCode: false,\n    ...options\n  };\n  if (Array.isArray(options.app)) {\n    return pTryEach(options.app, singleApp => baseOpen({\n      ...options,\n      app: singleApp\n    }));\n  }\n  let {\n    name: app,\n    arguments: appArguments = []\n  } = options.app ?? {};\n  appArguments = [...appArguments];\n  if (Array.isArray(app)) {\n    return pTryEach(app, appName => baseOpen({\n      ...options,\n      app: {\n        name: appName,\n        arguments: appArguments\n      }\n    }));\n  }\n  if (app === 'browser' || app === 'browserPrivate') {\n    // IDs from default-browser for macOS and windows are the same\n    const ids = {\n      'com.google.chrome': 'chrome',\n      'google-chrome.desktop': 'chrome',\n      'org.mozilla.firefox': 'firefox',\n      'firefox.desktop': 'firefox',\n      'com.microsoft.msedge': 'edge',\n      'com.microsoft.edge': 'edge',\n      'microsoft-edge.desktop': 'edge'\n    };\n\n    // Incognito flags for each browser in `apps`.\n    const flags = {\n      chrome: '--incognito',\n      firefox: '--private-window',\n      edge: '--inPrivate'\n    };\n    const browser = await defaultBrowser();\n    if (browser.id in ids) {\n      const browserName = ids[browser.id];\n      if (app === 'browserPrivate') {\n        appArguments.push(flags[browserName]);\n      }\n      return baseOpen({\n        ...options,\n        app: {\n          name: apps[browserName],\n          arguments: appArguments\n        }\n      });\n    }\n    throw new Error(`${browser.name} is not supported as a default browser`);\n  }\n  let command;\n  const cliArguments = [];\n  const childProcessOptions = {};\n  if (platform === 'darwin') {\n    command = 'open';\n    if (options.wait) {\n      cliArguments.push('--wait-apps');\n    }\n    if (options.background) {\n      cliArguments.push('--background');\n    }\n    if (options.newInstance) {\n      cliArguments.push('--new');\n    }\n    if (app) {\n      cliArguments.push('-a', app);\n    }\n  } else if (platform === 'win32' || isWsl && !isInsideContainer() && !app) {\n    const mountPoint = await getWslDrivesMountPoint();\n    command = isWsl ? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n    cliArguments.push('-NoProfile', '-NonInteractive', '-ExecutionPolicy', 'Bypass', '-EncodedCommand');\n    if (!isWsl) {\n      childProcessOptions.windowsVerbatimArguments = true;\n    }\n    const encodedArguments = ['Start'];\n    if (options.wait) {\n      encodedArguments.push('-Wait');\n    }\n    if (app) {\n      // Double quote with double quotes to ensure the inner quotes are passed through.\n      // Inner quotes are delimited for PowerShell interpretation with backticks.\n      encodedArguments.push(`\"\\`\"${app}\\`\"\"`);\n      if (options.target) {\n        appArguments.push(options.target);\n      }\n    } else if (options.target) {\n      encodedArguments.push(`\"${options.target}\"`);\n    }\n    if (appArguments.length > 0) {\n      appArguments = appArguments.map(argument => `\"\\`\"${argument}\\`\"\"`);\n      encodedArguments.push('-ArgumentList', appArguments.join(','));\n    }\n\n    // Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n    options.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n  } else {\n    if (app) {\n      command = app;\n    } else {\n      // When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n      const isBundled = !__dirname || __dirname === '/';\n\n      // Check if local `xdg-open` exists and is executable.\n      let exeLocalXdgOpen = false;\n      try {\n        await fs.access(localXdgOpenPath, fsConstants.X_OK);\n        exeLocalXdgOpen = true;\n      } catch {}\n      const useSystemXdgOpen = process.versions.electron ?? (platform === 'android' || isBundled || !exeLocalXdgOpen);\n      command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n    }\n    if (appArguments.length > 0) {\n      cliArguments.push(...appArguments);\n    }\n    if (!options.wait) {\n      // `xdg-open` will block the process unless stdio is ignored\n      // and it's detached from the parent even if it's unref'd.\n      childProcessOptions.stdio = 'ignore';\n      childProcessOptions.detached = true;\n    }\n  }\n  if (options.target) {\n    cliArguments.push(options.target);\n  }\n  if (platform === 'darwin' && appArguments.length > 0) {\n    cliArguments.push('--args', ...appArguments);\n  }\n  const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n  if (options.wait) {\n    return new Promise((resolve, reject) => {\n      subprocess.once('error', reject);\n      subprocess.once('close', exitCode => {\n        if (!options.allowNonzeroExitCode && exitCode > 0) {\n          reject(new Error(`Exited with code ${exitCode}`));\n          return;\n        }\n        resolve(subprocess);\n      });\n    });\n  }\n  subprocess.unref();\n  return subprocess;\n};\nconst open = (target, options) => {\n  if (typeof target !== 'string') {\n    throw new TypeError('Expected a `target`');\n  }\n  return baseOpen({\n    ...options,\n    target\n  });\n};\nexport const openApp = (name, options) => {\n  if (typeof name !== 'string') {\n    throw new TypeError('Expected a `name`');\n  }\n  const {\n    arguments: appArguments = []\n  } = options ?? {};\n  if (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n    throw new TypeError('Expected `appArguments` as Array type');\n  }\n  return baseOpen({\n    ...options,\n    app: {\n      name,\n      arguments: appArguments\n    }\n  });\n};\nfunction detectArchBinary(binary) {\n  if (typeof binary === 'string' || Array.isArray(binary)) {\n    return binary;\n  }\n  const {\n    [arch]: archBinary\n  } = binary;\n  if (!archBinary) {\n    throw new Error(`${arch} is not supported`);\n  }\n  return archBinary;\n}\nfunction detectPlatformBinary({\n  [platform]: platformBinary\n}, {\n  wsl\n}) {\n  if (wsl && isWsl) {\n    return detectArchBinary(wsl);\n  }\n  if (!platformBinary) {\n    throw new Error(`${platform} is not supported`);\n  }\n  return detectArchBinary(platformBinary);\n}\nexport const apps = {};\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n  darwin: 'google chrome',\n  win32: 'chrome',\n  linux: ['google-chrome', 'google-chrome-stable', 'chromium']\n}, {\n  wsl: {\n    ia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n    x64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe']\n  }\n}));\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n  darwin: 'firefox',\n  win32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n  linux: 'firefox'\n}, {\n  wsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'\n}));\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n  darwin: 'microsoft edge',\n  win32: 'msedge',\n  linux: ['microsoft-edge', 'microsoft-edge-dev']\n}, {\n  wsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'\n}));\ndefineLazyProperty(apps, 'browser', () => 'browser');\ndefineLazyProperty(apps, 'browserPrivate', () => 'browserPrivate');\nexport default open;","map":{"version":3,"names":["process","Buffer","path","fileURLToPath","childProcess","fs","constants","fsConstants","isWsl","defineLazyProperty","defaultBrowser","isInsideContainer","__dirname","dirname","import","meta","url","localXdgOpenPath","join","platform","arch","getWslDrivesMountPoint","defaultMountPoint","mountPoint","configFilePath","isConfigFileExists","access","F_OK","configContent","readFile","encoding","configMountPoint","exec","groups","trim","endsWith","pTryEach","array","mapper","latestError","item","error","baseOpen","options","wait","background","newInstance","allowNonzeroExitCode","Array","isArray","app","singleApp","name","arguments","appArguments","appName","ids","flags","chrome","firefox","edge","browser","id","browserName","push","apps","Error","command","cliArguments","childProcessOptions","env","SYSTEMROOT","windowsVerbatimArguments","encodedArguments","target","length","map","argument","from","toString","isBundled","exeLocalXdgOpen","X_OK","useSystemXdgOpen","versions","electron","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","unref","open","TypeError","openApp","undefined","detectArchBinary","binary","archBinary","detectPlatformBinary","platformBinary","wsl","darwin","win32","linux","ia32","x64"],"sources":["C:/Users/HarshitSrivastava/Desktop/Practice/React/Project2/my-app/node_modules/open/index.js"],"sourcesContent":["import process from 'node:process';\nimport {Buffer} from 'node:buffer';\nimport path from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport childProcess from 'node:child_process';\nimport fs, {constants as fsConstants} from 'node:fs/promises';\nimport isWsl from 'is-wsl';\nimport defineLazyProperty from 'define-lazy-prop';\nimport defaultBrowser from 'default-browser';\nimport isInsideContainer from 'is-inside-container';\n\n// Path to included `xdg-open`.\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\nconst {platform, arch} = process;\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait fs.access(configFilePath, fsConstants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await fs.readFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint.groups.mountPoint.trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n\n\t\treturn mountPoint;\n\t};\n})();\n\nconst pTryEach = async (array, mapper) => {\n\tlet latestError;\n\n\tfor (const item of array) {\n\t\ttry {\n\t\t\treturn await mapper(item); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tlatestError = error;\n\t\t}\n\t}\n\n\tthrow latestError;\n};\n\nconst baseOpen = async options => {\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tnewInstance: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options,\n\t};\n\n\tif (Array.isArray(options.app)) {\n\t\treturn pTryEach(options.app, singleApp => baseOpen({\n\t\t\t...options,\n\t\t\tapp: singleApp,\n\t\t}));\n\t}\n\n\tlet {name: app, arguments: appArguments = []} = options.app ?? {};\n\tappArguments = [...appArguments];\n\n\tif (Array.isArray(app)) {\n\t\treturn pTryEach(app, appName => baseOpen({\n\t\t\t...options,\n\t\t\tapp: {\n\t\t\t\tname: appName,\n\t\t\t\targuments: appArguments,\n\t\t\t},\n\t\t}));\n\t}\n\n\tif (app === 'browser' || app === 'browserPrivate') {\n\t\t// IDs from default-browser for macOS and windows are the same\n\t\tconst ids = {\n\t\t\t'com.google.chrome': 'chrome',\n\t\t\t'google-chrome.desktop': 'chrome',\n\t\t\t'org.mozilla.firefox': 'firefox',\n\t\t\t'firefox.desktop': 'firefox',\n\t\t\t'com.microsoft.msedge': 'edge',\n\t\t\t'com.microsoft.edge': 'edge',\n\t\t\t'microsoft-edge.desktop': 'edge',\n\t\t};\n\n\t\t// Incognito flags for each browser in `apps`.\n\t\tconst flags = {\n\t\t\tchrome: '--incognito',\n\t\t\tfirefox: '--private-window',\n\t\t\tedge: '--inPrivate',\n\t\t};\n\n\t\tconst browser = await defaultBrowser();\n\t\tif (browser.id in ids) {\n\t\t\tconst browserName = ids[browser.id];\n\n\t\t\tif (app === 'browserPrivate') {\n\t\t\t\tappArguments.push(flags[browserName]);\n\t\t\t}\n\n\t\t\treturn baseOpen({\n\t\t\t\t...options,\n\t\t\t\tapp: {\n\t\t\t\t\tname: apps[browserName],\n\t\t\t\t\targuments: appArguments,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tthrow new Error(`${browser.name} is not supported as a default browser`);\n\t}\n\n\tlet command;\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.newInstance) {\n\t\t\tcliArguments.push('--new');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (platform === 'win32' || (isWsl && !isInsideContainer() && !app)) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl\n\t\t\t? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe`\n\t\t\t: `${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'-ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand',\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`);\n\t\t\tif (options.target) {\n\t\t\t\tappArguments.push(options.target);\n\t\t\t}\n\t\t} else if (options.target) {\n\t\t\tencodedArguments.push(`\"${options.target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(argument => `\"\\`\"${argument}\\`\"\"`);\n\t\t\tencodedArguments.push('-ArgumentList', appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait fs.access(localXdgOpenPath, fsConstants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron\n\t\t\t\t?? (platform === 'android' || isBundled || !exeLocalXdgOpen);\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tif (options.target) {\n\t\tcliArguments.push(options.target);\n\t}\n\n\tif (platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (!options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n\nconst open = (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\ttarget,\n\t});\n};\n\nexport const openApp = (name, options) => {\n\tif (typeof name !== 'string') {\n\t\tthrow new TypeError('Expected a `name`');\n\t}\n\n\tconst {arguments: appArguments = []} = options ?? {};\n\tif (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n\t\tthrow new TypeError('Expected `appArguments` as Array type');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\tapp: {\n\t\t\tname,\n\t\t\targuments: appArguments,\n\t\t},\n\t});\n};\n\nfunction detectArchBinary(binary) {\n\tif (typeof binary === 'string' || Array.isArray(binary)) {\n\t\treturn binary;\n\t}\n\n\tconst {[arch]: archBinary} = binary;\n\n\tif (!archBinary) {\n\t\tthrow new Error(`${arch} is not supported`);\n\t}\n\n\treturn archBinary;\n}\n\nfunction detectPlatformBinary({[platform]: platformBinary}, {wsl}) {\n\tif (wsl && isWsl) {\n\t\treturn detectArchBinary(wsl);\n\t}\n\n\tif (!platformBinary) {\n\t\tthrow new Error(`${platform} is not supported`);\n\t}\n\n\treturn detectArchBinary(platformBinary);\n}\n\nexport const apps = {};\n\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n\tdarwin: 'google chrome',\n\twin32: 'chrome',\n\tlinux: ['google-chrome', 'google-chrome-stable', 'chromium'],\n}, {\n\twsl: {\n\t\tia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n\t\tx64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe'],\n\t},\n}));\n\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n\tdarwin: 'firefox',\n\twin32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n\tlinux: 'firefox',\n}, {\n\twsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe',\n}));\n\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n\tdarwin: 'microsoft edge',\n\twin32: 'msedge',\n\tlinux: ['microsoft-edge', 'microsoft-edge-dev'],\n}, {\n\twsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe',\n}));\n\ndefineLazyProperty(apps, 'browser', () => 'browser');\n\ndefineLazyProperty(apps, 'browserPrivate', () => 'browserPrivate');\n\nexport default open;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}