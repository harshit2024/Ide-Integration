{"ast":null,"code":"// Copyright (c) 2006, 2008 Tony Garnock-Jones <tonyg@lshift.net>\n// Copyright (c) 2006, 2008 LShift Ltd. <query@lshift.net>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar onp = require('./onp');\nfunction longestCommonSubsequence(file1, file2) {\n  var diff = new onp(file1, file2);\n  diff.compose();\n  var ses = diff.getses();\n  var root;\n  var prev;\n  var file1RevIdx = file1.length - 1,\n    file2RevIdx = file2.length - 1;\n  for (var i = ses.length - 1; i >= 0; --i) {\n    if (ses[i].t === diff.SES_COMMON) {\n      if (prev) {\n        prev.chain = {\n          file1index: file1RevIdx,\n          file2index: file2RevIdx,\n          chain: null\n        };\n        prev = prev.chain;\n      } else {\n        root = {\n          file1index: file1RevIdx,\n          file2index: file2RevIdx,\n          chain: null\n        };\n        prev = root;\n      }\n      file1RevIdx--;\n      file2RevIdx--;\n    } else if (ses[i].t === diff.SES_DELETE) {\n      file1RevIdx--;\n    } else if (ses[i].t === diff.SES_ADD) {\n      file2RevIdx--;\n    }\n  }\n  var tail = {\n    file1index: -1,\n    file2index: -1,\n    chain: null\n  };\n  if (!prev) {\n    return tail;\n  }\n  prev.chain = tail;\n  return root;\n}\nfunction diffIndices(file1, file2) {\n  // We apply the LCS to give a simple representation of the\n  // offsets and lengths of mismatched chunks in the input\n  // files. This is used by diff3_merge_indices below.\n\n  var result = [];\n  var tail1 = file1.length;\n  var tail2 = file2.length;\n  for (var candidate = longestCommonSubsequence(file1, file2); candidate !== null; candidate = candidate.chain) {\n    var mismatchLength1 = tail1 - candidate.file1index - 1;\n    var mismatchLength2 = tail2 - candidate.file2index - 1;\n    tail1 = candidate.file1index;\n    tail2 = candidate.file2index;\n    if (mismatchLength1 || mismatchLength2) {\n      result.push({\n        file1: [tail1 + 1, mismatchLength1],\n        file2: [tail2 + 1, mismatchLength2]\n      });\n    }\n  }\n  result.reverse();\n  return result;\n}\nfunction diff3MergeIndices(a, o, b) {\n  // Given three files, A, O, and B, where both A and B are\n  // independently derived from O, returns a fairly complicated\n  // internal representation of merge decisions it's taken. The\n  // interested reader may wish to consult\n  //\n  // Sanjeev Khanna, Keshav Kunal, and Benjamin C. Pierce. \"A\n  // Formal Investigation of Diff3.\" In Arvind and Prasad,\n  // editors, Foundations of Software Technology and Theoretical\n  // Computer Science (FSTTCS), December 2007.\n  //\n  // (http://www.cis.upenn.edu/~bcpierce/papers/diff3-short.pdf)\n  var i;\n  var m1 = diffIndices(o, a);\n  var m2 = diffIndices(o, b);\n  var hunks = [];\n  function addHunk(h, side) {\n    hunks.push([h.file1[0], side, h.file1[1], h.file2[0], h.file2[1]]);\n  }\n  for (i = 0; i < m1.length; i++) {\n    addHunk(m1[i], 0);\n  }\n  for (i = 0; i < m2.length; i++) {\n    addHunk(m2[i], 2);\n  }\n  hunks.sort(function (x, y) {\n    return x[0] - y[0];\n  });\n  var result = [];\n  var commonOffset = 0;\n  function copyCommon(targetOffset) {\n    if (targetOffset > commonOffset) {\n      result.push([1, commonOffset, targetOffset - commonOffset]);\n      commonOffset = targetOffset;\n    }\n  }\n  for (var hunkIndex = 0; hunkIndex < hunks.length; hunkIndex++) {\n    var firstHunkIndex = hunkIndex;\n    var hunk = hunks[hunkIndex];\n    var regionLhs = hunk[0];\n    var regionRhs = regionLhs + hunk[2];\n    while (hunkIndex < hunks.length - 1) {\n      var maybeOverlapping = hunks[hunkIndex + 1];\n      var maybeLhs = maybeOverlapping[0];\n      if (maybeLhs > regionRhs) break;\n      regionRhs = Math.max(regionRhs, maybeLhs + maybeOverlapping[2]);\n      hunkIndex++;\n    }\n    copyCommon(regionLhs);\n    if (firstHunkIndex == hunkIndex) {\n      // The \"overlap\" was only one hunk long, meaning that\n      // there's no conflict here. Either a and o were the\n      // same, or b and o were the same.\n      if (hunk[4] > 0) {\n        result.push([hunk[1], hunk[3], hunk[4]]);\n      }\n    } else {\n      // A proper conflict. Determine the extents of the\n      // regions involved from a, o and b. Effectively merge\n      // all the hunks on the left into one giant hunk, and\n      // do the same for the right; then, correct for skew\n      // in the regions of o that each side changed, and\n      // report appropriate spans for the three sides.\n      var regions = {\n        0: [a.length, -1, o.length, -1],\n        2: [b.length, -1, o.length, -1]\n      };\n      for (i = firstHunkIndex; i <= hunkIndex; i++) {\n        hunk = hunks[i];\n        var side = hunk[1];\n        var r = regions[side];\n        var oLhs = hunk[0];\n        var oRhs = oLhs + hunk[2];\n        var abLhs = hunk[3];\n        var abRhs = abLhs + hunk[4];\n        r[0] = Math.min(abLhs, r[0]);\n        r[1] = Math.max(abRhs, r[1]);\n        r[2] = Math.min(oLhs, r[2]);\n        r[3] = Math.max(oRhs, r[3]);\n      }\n      var aLhs = regions[0][0] + (regionLhs - regions[0][2]);\n      var aRhs = regions[0][1] + (regionRhs - regions[0][3]);\n      var bLhs = regions[2][0] + (regionLhs - regions[2][2]);\n      var bRhs = regions[2][1] + (regionRhs - regions[2][3]);\n      result.push([-1, aLhs, aRhs - aLhs, regionLhs, regionRhs - regionLhs, bLhs, bRhs - bLhs]);\n    }\n    commonOffset = regionRhs;\n  }\n  copyCommon(o.length);\n  return result;\n}\nfunction diff3Merge(a, o, b) {\n  // Applies the output of Diff.diff3_merge_indices to actually\n  // construct the merged file; the returned result alternates\n  // between \"ok\" and \"conflict\" blocks.\n\n  var result = [];\n  var files = [a, o, b];\n  var indices = diff3MergeIndices(a, o, b);\n  var okLines = [];\n  function flushOk() {\n    if (okLines.length) {\n      result.push({\n        ok: okLines\n      });\n    }\n    okLines = [];\n  }\n  function pushOk(xs) {\n    for (var j = 0; j < xs.length; j++) {\n      okLines.push(xs[j]);\n    }\n  }\n  function isTrueConflict(rec) {\n    if (rec[2] != rec[6]) return true;\n    var aoff = rec[1];\n    var boff = rec[5];\n    for (var j = 0; j < rec[2]; j++) {\n      if (a[j + aoff] != b[j + boff]) return true;\n    }\n    return false;\n  }\n  for (var i = 0; i < indices.length; i++) {\n    var x = indices[i];\n    var side = x[0];\n    if (side == -1) {\n      if (!isTrueConflict(x)) {\n        pushOk(files[0].slice(x[1], x[1] + x[2]));\n      } else {\n        flushOk();\n        result.push({\n          conflict: {\n            a: a.slice(x[1], x[1] + x[2]),\n            aIndex: x[1],\n            o: o.slice(x[3], x[3] + x[4]),\n            oIndex: x[3],\n            b: b.slice(x[5], x[5] + x[6]),\n            bIndex: x[5]\n          }\n        });\n      }\n    } else {\n      pushOk(files[side].slice(x[1], x[1] + x[2]));\n    }\n  }\n  flushOk();\n  return result;\n}\nmodule.exports = diff3Merge;","map":{"version":3,"names":["onp","require","longestCommonSubsequence","file1","file2","diff","compose","ses","getses","root","prev","file1RevIdx","length","file2RevIdx","i","t","SES_COMMON","chain","file1index","file2index","SES_DELETE","SES_ADD","tail","diffIndices","result","tail1","tail2","candidate","mismatchLength1","mismatchLength2","push","reverse","diff3MergeIndices","a","o","b","m1","m2","hunks","addHunk","h","side","sort","x","y","commonOffset","copyCommon","targetOffset","hunkIndex","firstHunkIndex","hunk","regionLhs","regionRhs","maybeOverlapping","maybeLhs","Math","max","regions","r","oLhs","oRhs","abLhs","abRhs","min","aLhs","aRhs","bLhs","bRhs","diff3Merge","files","indices","okLines","flushOk","ok","pushOk","xs","j","isTrueConflict","rec","aoff","boff","slice","conflict","aIndex","oIndex","bIndex","module","exports"],"sources":["C:/Users/HarshitSrivastava/Desktop/Practice/React/Project2/my-app/node_modules/diff3/diff3.js"],"sourcesContent":["// Copyright (c) 2006, 2008 Tony Garnock-Jones <tonyg@lshift.net>\n// Copyright (c) 2006, 2008 LShift Ltd. <query@lshift.net>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvar onp = require('./onp');\n\nfunction longestCommonSubsequence(file1, file2) {\n  var diff = new onp(file1, file2);\n  diff.compose();\n  var ses = diff.getses();\n\n  var root;\n  var prev;\n  var file1RevIdx = file1.length - 1,\n      file2RevIdx = file2.length - 1;\n  for (var i = ses.length - 1; i >= 0; --i) {\n      if (ses[i].t === diff.SES_COMMON) {\n        if (prev) {\n          prev.chain = {\n            file1index: file1RevIdx,\n            file2index: file2RevIdx,\n            chain: null\n          };\n          prev = prev.chain;\n        } else {\n          root = {\n            file1index: file1RevIdx,\n            file2index: file2RevIdx,\n            chain: null\n          };\n          prev = root;\n        }\n        file1RevIdx--;\n        file2RevIdx--;\n      } else if (ses[i].t === diff.SES_DELETE) {\n        file1RevIdx--;\n      } else if (ses[i].t === diff.SES_ADD) {\n        file2RevIdx--;\n      }\n  }\n\n  var tail = {\n    file1index: -1,\n    file2index: -1,\n    chain: null\n  };\n\n  if (!prev) {\n    return tail;\n  }\n\n  prev.chain = tail;\n\n  return root;\n}\n\nfunction diffIndices(file1, file2) {\n  // We apply the LCS to give a simple representation of the\n  // offsets and lengths of mismatched chunks in the input\n  // files. This is used by diff3_merge_indices below.\n\n  var result = [];\n  var tail1 = file1.length;\n  var tail2 = file2.length;\n\n  for (var candidate = longestCommonSubsequence(file1, file2); candidate !== null; candidate = candidate.chain) {\n    var mismatchLength1 = tail1 - candidate.file1index - 1;\n    var mismatchLength2 = tail2 - candidate.file2index - 1;\n    tail1 = candidate.file1index;\n    tail2 = candidate.file2index;\n\n    if (mismatchLength1 || mismatchLength2) {\n      result.push({\n        file1: [tail1 + 1, mismatchLength1],\n        file2: [tail2 + 1, mismatchLength2]\n      });\n    }\n  }\n\n  result.reverse();\n  return result;\n}\n\nfunction diff3MergeIndices(a, o, b) {\n  // Given three files, A, O, and B, where both A and B are\n  // independently derived from O, returns a fairly complicated\n  // internal representation of merge decisions it's taken. The\n  // interested reader may wish to consult\n  //\n  // Sanjeev Khanna, Keshav Kunal, and Benjamin C. Pierce. \"A\n  // Formal Investigation of Diff3.\" In Arvind and Prasad,\n  // editors, Foundations of Software Technology and Theoretical\n  // Computer Science (FSTTCS), December 2007.\n  //\n  // (http://www.cis.upenn.edu/~bcpierce/papers/diff3-short.pdf)\n  var i;\n\n  var m1 = diffIndices(o, a);\n  var m2 = diffIndices(o, b);\n\n  var hunks = [];\n\n  function addHunk(h, side) {\n    hunks.push([h.file1[0], side, h.file1[1], h.file2[0], h.file2[1]]);\n  }\n  for (i = 0; i < m1.length; i++) {\n    addHunk(m1[i], 0);\n  }\n  for (i = 0; i < m2.length; i++) {\n    addHunk(m2[i], 2);\n  }\n  hunks.sort(function(x, y) {\n    return x[0] - y[0]\n  });\n\n  var result = [];\n  var commonOffset = 0;\n\n  function copyCommon(targetOffset) {\n    if (targetOffset > commonOffset) {\n      result.push([1, commonOffset, targetOffset - commonOffset]);\n      commonOffset = targetOffset;\n    }\n  }\n\n  for (var hunkIndex = 0; hunkIndex < hunks.length; hunkIndex++) {\n    var firstHunkIndex = hunkIndex;\n    var hunk = hunks[hunkIndex];\n    var regionLhs = hunk[0];\n    var regionRhs = regionLhs + hunk[2];\n    while (hunkIndex < hunks.length - 1) {\n      var maybeOverlapping = hunks[hunkIndex + 1];\n      var maybeLhs = maybeOverlapping[0];\n      if (maybeLhs > regionRhs) break;\n      regionRhs = Math.max(regionRhs, maybeLhs + maybeOverlapping[2]);\n      hunkIndex++;\n    }\n\n    copyCommon(regionLhs);\n    if (firstHunkIndex == hunkIndex) {\n      // The \"overlap\" was only one hunk long, meaning that\n      // there's no conflict here. Either a and o were the\n      // same, or b and o were the same.\n      if (hunk[4] > 0) {\n        result.push([hunk[1], hunk[3], hunk[4]]);\n      }\n    } else {\n      // A proper conflict. Determine the extents of the\n      // regions involved from a, o and b. Effectively merge\n      // all the hunks on the left into one giant hunk, and\n      // do the same for the right; then, correct for skew\n      // in the regions of o that each side changed, and\n      // report appropriate spans for the three sides.\n      var regions = {\n        0: [a.length, -1, o.length, -1],\n        2: [b.length, -1, o.length, -1]\n      };\n      for (i = firstHunkIndex; i <= hunkIndex; i++) {\n        hunk = hunks[i];\n        var side = hunk[1];\n        var r = regions[side];\n        var oLhs = hunk[0];\n        var oRhs = oLhs + hunk[2];\n        var abLhs = hunk[3];\n        var abRhs = abLhs + hunk[4];\n        r[0] = Math.min(abLhs, r[0]);\n        r[1] = Math.max(abRhs, r[1]);\n        r[2] = Math.min(oLhs, r[2]);\n        r[3] = Math.max(oRhs, r[3]);\n      }\n      var aLhs = regions[0][0] + (regionLhs - regions[0][2]);\n      var aRhs = regions[0][1] + (regionRhs - regions[0][3]);\n      var bLhs = regions[2][0] + (regionLhs - regions[2][2]);\n      var bRhs = regions[2][1] + (regionRhs - regions[2][3]);\n      result.push([-1,\n        aLhs, aRhs - aLhs,\n        regionLhs, regionRhs - regionLhs,\n        bLhs, bRhs - bLhs\n      ]);\n    }\n    commonOffset = regionRhs;\n  }\n\n  copyCommon(o.length);\n  return result;\n}\n\nfunction diff3Merge(a, o, b) {\n  // Applies the output of Diff.diff3_merge_indices to actually\n  // construct the merged file; the returned result alternates\n  // between \"ok\" and \"conflict\" blocks.\n\n  var result = [];\n  var files = [a, o, b];\n  var indices = diff3MergeIndices(a, o, b);\n\n  var okLines = [];\n\n  function flushOk() {\n    if (okLines.length) {\n      result.push({\n        ok: okLines\n      });\n    }\n    okLines = [];\n  }\n\n  function pushOk(xs) {\n    for (var j = 0; j < xs.length; j++) {\n      okLines.push(xs[j]);\n    }\n  }\n\n  function isTrueConflict(rec) {\n    if (rec[2] != rec[6]) return true;\n    var aoff = rec[1];\n    var boff = rec[5];\n    for (var j = 0; j < rec[2]; j++) {\n      if (a[j + aoff] != b[j + boff]) return true;\n    }\n    return false;\n  }\n\n  for (var i = 0; i < indices.length; i++) {\n    var x = indices[i];\n    var side = x[0];\n    if (side == -1) {\n      if (!isTrueConflict(x)) {\n        pushOk(files[0].slice(x[1], x[1] + x[2]));\n      } else {\n        flushOk();\n        result.push({\n          conflict: {\n            a: a.slice(x[1], x[1] + x[2]),\n            aIndex: x[1],\n            o: o.slice(x[3], x[3] + x[4]),\n            oIndex: x[3],\n            b: b.slice(x[5], x[5] + x[6]),\n            bIndex: x[5]\n          }\n        });\n      }\n    } else {\n      pushOk(files[side].slice(x[1], x[1] + x[2]));\n    }\n  }\n\n  flushOk();\n  return result;\n}\n\nmodule.exports = diff3Merge;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}