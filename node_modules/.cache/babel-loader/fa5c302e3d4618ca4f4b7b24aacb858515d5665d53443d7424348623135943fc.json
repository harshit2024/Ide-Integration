{"ast":null,"code":"import { promisify } from 'node:util';\nimport { execFile } from 'node:child_process';\nconst execFileAsync = promisify(execFile);\n\n// Windows doesn't have browser IDs in the same way macOS/Linux does so we give fake\n// ones that look real and match the macOS/Linux versions for cross-platform apps.\nconst windowsBrowserProgIds = {\n  AppXq0fevzme2pys62n3e0fbqa7peapykr8v: {\n    name: 'Edge',\n    id: 'com.microsoft.edge.old'\n  },\n  MSEdgeDHTML: {\n    name: 'Edge',\n    id: 'com.microsoft.edge'\n  },\n  // On macOS, it's \"com.microsoft.edgemac\"\n  MSEdgeHTM: {\n    name: 'Edge',\n    id: 'com.microsoft.edge'\n  },\n  // Newer Edge/Win10 releases\n  'IE.HTTP': {\n    name: 'Internet Explorer',\n    id: 'com.microsoft.ie'\n  },\n  FirefoxURL: {\n    name: 'Firefox',\n    id: 'org.mozilla.firefox'\n  },\n  ChromeHTML: {\n    name: 'Chrome',\n    id: 'com.google.chrome'\n  },\n  BraveHTML: {\n    name: 'Brave',\n    id: 'com.brave.Browser'\n  },\n  BraveBHTML: {\n    name: 'Brave Beta',\n    id: 'com.brave.Browser.beta'\n  },\n  BraveSSHTM: {\n    name: 'Brave Nightly',\n    id: 'com.brave.Browser.nightly'\n  }\n};\nexport class UnknownBrowserError extends Error {}\nexport default async function defaultBrowser(_execFileAsync = execFileAsync) {\n  const {\n    stdout\n  } = await _execFileAsync('reg', ['QUERY', ' HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\Shell\\\\Associations\\\\UrlAssociations\\\\http\\\\UserChoice', '/v', 'ProgId']);\n  const match = /ProgId\\s*REG_SZ\\s*(?<id>\\S+)/.exec(stdout);\n  if (!match) {\n    throw new UnknownBrowserError(`Cannot find Windows browser in stdout: ${JSON.stringify(stdout)}`);\n  }\n  const {\n    id\n  } = match.groups;\n  const browser = windowsBrowserProgIds[id];\n  if (!browser) {\n    throw new UnknownBrowserError(`Unknown browser ID: ${id}`);\n  }\n  return browser;\n}","map":{"version":3,"names":["promisify","execFile","execFileAsync","windowsBrowserProgIds","AppXq0fevzme2pys62n3e0fbqa7peapykr8v","name","id","MSEdgeDHTML","MSEdgeHTM","FirefoxURL","ChromeHTML","BraveHTML","BraveBHTML","BraveSSHTM","UnknownBrowserError","Error","defaultBrowser","_execFileAsync","stdout","match","exec","JSON","stringify","groups","browser"],"sources":["C:/Users/HarshitSrivastava/Desktop/Practice/React/Project2/my-app/node_modules/default-browser/windows.js"],"sourcesContent":["import {promisify} from 'node:util';\nimport {execFile} from 'node:child_process';\n\nconst execFileAsync = promisify(execFile);\n\n// Windows doesn't have browser IDs in the same way macOS/Linux does so we give fake\n// ones that look real and match the macOS/Linux versions for cross-platform apps.\nconst windowsBrowserProgIds = {\n\tAppXq0fevzme2pys62n3e0fbqa7peapykr8v: {name: 'Edge', id: 'com.microsoft.edge.old'},\n\tMSEdgeDHTML: {name: 'Edge', id: 'com.microsoft.edge'}, // On macOS, it's \"com.microsoft.edgemac\"\n\tMSEdgeHTM: {name: 'Edge', id: 'com.microsoft.edge'}, // Newer Edge/Win10 releases\n\t'IE.HTTP': {name: 'Internet Explorer', id: 'com.microsoft.ie'},\n\tFirefoxURL: {name: 'Firefox', id: 'org.mozilla.firefox'},\n\tChromeHTML: {name: 'Chrome', id: 'com.google.chrome'},\n\tBraveHTML: {name: 'Brave', id: 'com.brave.Browser'},\n\tBraveBHTML: {name: 'Brave Beta', id: 'com.brave.Browser.beta'},\n\tBraveSSHTM: {name: 'Brave Nightly', id: 'com.brave.Browser.nightly'},\n};\n\nexport class UnknownBrowserError extends Error {}\n\nexport default async function defaultBrowser(_execFileAsync = execFileAsync) {\n\tconst {stdout} = await _execFileAsync('reg', [\n\t\t'QUERY',\n\t\t' HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\Shell\\\\Associations\\\\UrlAssociations\\\\http\\\\UserChoice',\n\t\t'/v',\n\t\t'ProgId',\n\t]);\n\n\tconst match = /ProgId\\s*REG_SZ\\s*(?<id>\\S+)/.exec(stdout);\n\tif (!match) {\n\t\tthrow new UnknownBrowserError(`Cannot find Windows browser in stdout: ${JSON.stringify(stdout)}`);\n\t}\n\n\tconst {id} = match.groups;\n\n\tconst browser = windowsBrowserProgIds[id];\n\tif (!browser) {\n\t\tthrow new UnknownBrowserError(`Unknown browser ID: ${id}`);\n\t}\n\n\treturn browser;\n}\n"],"mappings":"AAAA,SAAQA,SAAS,QAAO,WAAW;AACnC,SAAQC,QAAQ,QAAO,oBAAoB;AAE3C,MAAMC,aAAa,GAAGF,SAAS,CAACC,QAAQ,CAAC;;AAEzC;AACA;AACA,MAAME,qBAAqB,GAAG;EAC7BC,oCAAoC,EAAE;IAACC,IAAI,EAAE,MAAM;IAAEC,EAAE,EAAE;EAAwB,CAAC;EAClFC,WAAW,EAAE;IAACF,IAAI,EAAE,MAAM;IAAEC,EAAE,EAAE;EAAoB,CAAC;EAAE;EACvDE,SAAS,EAAE;IAACH,IAAI,EAAE,MAAM;IAAEC,EAAE,EAAE;EAAoB,CAAC;EAAE;EACrD,SAAS,EAAE;IAACD,IAAI,EAAE,mBAAmB;IAAEC,EAAE,EAAE;EAAkB,CAAC;EAC9DG,UAAU,EAAE;IAACJ,IAAI,EAAE,SAAS;IAAEC,EAAE,EAAE;EAAqB,CAAC;EACxDI,UAAU,EAAE;IAACL,IAAI,EAAE,QAAQ;IAAEC,EAAE,EAAE;EAAmB,CAAC;EACrDK,SAAS,EAAE;IAACN,IAAI,EAAE,OAAO;IAAEC,EAAE,EAAE;EAAmB,CAAC;EACnDM,UAAU,EAAE;IAACP,IAAI,EAAE,YAAY;IAAEC,EAAE,EAAE;EAAwB,CAAC;EAC9DO,UAAU,EAAE;IAACR,IAAI,EAAE,eAAe;IAAEC,EAAE,EAAE;EAA2B;AACpE,CAAC;AAED,OAAO,MAAMQ,mBAAmB,SAASC,KAAK,CAAC;AAE/C,eAAe,eAAeC,cAAcA,CAACC,cAAc,GAAGf,aAAa,EAAE;EAC5E,MAAM;IAACgB;EAAM,CAAC,GAAG,MAAMD,cAAc,CAAC,KAAK,EAAE,CAC5C,OAAO,EACP,0GAA0G,EAC1G,IAAI,EACJ,QAAQ,CACR,CAAC;EAEF,MAAME,KAAK,GAAG,8BAA8B,CAACC,IAAI,CAACF,MAAM,CAAC;EACzD,IAAI,CAACC,KAAK,EAAE;IACX,MAAM,IAAIL,mBAAmB,CAAE,0CAAyCO,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAE,EAAC,CAAC;EAClG;EAEA,MAAM;IAACZ;EAAE,CAAC,GAAGa,KAAK,CAACI,MAAM;EAEzB,MAAMC,OAAO,GAAGrB,qBAAqB,CAACG,EAAE,CAAC;EACzC,IAAI,CAACkB,OAAO,EAAE;IACb,MAAM,IAAIV,mBAAmB,CAAE,uBAAsBR,EAAG,EAAC,CAAC;EAC3D;EAEA,OAAOkB,OAAO;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}