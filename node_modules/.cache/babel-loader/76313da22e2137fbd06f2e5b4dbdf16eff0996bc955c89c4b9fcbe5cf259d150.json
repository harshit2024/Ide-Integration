{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HarshitSrivastava\\\\Desktop\\\\Practice\\\\React\\\\Project2\\\\my-app\\\\src\\\\CloneRepositoryButton.jsx\",\n  _s = $RefreshSig$();\n// CloneRepositoryButton.jsx\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CloneRepositoryButton = () => {\n  _s();\n  const [repositoryInfo, setRepositoryInfo] = useState({\n    owner: 'harshit2024',\n    repo: 'RestApi'\n  });\n  const [cloningStatus, setCloningStatus] = useState('');\n  const handleCloneRepository = async () => {\n    try {\n      // Make a request to your server to initiate the cloning process\n      const response = await fetch('http://localhost:3001/cloneRepository', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(repositoryInfo)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setCloningStatus(data.message);\n      } else {\n        const errorData = await response.json();\n        setCloningStatus(`Error: ${errorData.error}`);\n      }\n    } catch (error) {\n      console.error('Error initiating repository cloning:', error);\n      setCloningStatus('Error initiating repository cloning');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCloneRepository,\n      children: \"Clone Repository\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: cloningStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(CloneRepositoryButton, \"JMQ2KrqmUOiPGQYWBm9fRYILJEY=\");\n_c = CloneRepositoryButton;\nexport default CloneRepositoryButton;\nvar _c;\n$RefreshReg$(_c, \"CloneRepositoryButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CloneRepositoryButton","_s","repositoryInfo","setRepositoryInfo","owner","repo","cloningStatus","setCloningStatus","handleCloneRepository","response","fetch","method","headers","body","JSON","stringify","ok","data","json","message","errorData","error","console","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HarshitSrivastava/Desktop/Practice/React/Project2/my-app/src/CloneRepositoryButton.jsx"],"sourcesContent":["// CloneRepositoryButton.jsx\r\nimport React, { useState } from 'react';\r\n\r\nconst CloneRepositoryButton = () => {\r\n  const [repositoryInfo, setRepositoryInfo] = useState({\r\n    owner: 'harshit2024',\r\n    repo: 'RestApi',\r\n  });\r\n  const [cloningStatus, setCloningStatus] = useState('');\r\n\r\n  const handleCloneRepository = async () => {\r\n    try {\r\n      // Make a request to your server to initiate the cloning process\r\n      const response = await fetch('http://localhost:3001/cloneRepository', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(repositoryInfo),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setCloningStatus(data.message);\r\n      } else {\r\n        const errorData = await response.json();\r\n        setCloningStatus(`Error: ${errorData.error}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initiating repository cloning:', error);\r\n      setCloningStatus('Error initiating repository cloning');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleCloneRepository}>Clone Repository</button>\r\n      <p>{cloningStatus}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CloneRepositoryButton;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAC;IACnDO,KAAK,EAAE,aAAa;IACpBC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMW,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,cAAc;MACrC,CAAC,CAAC;MAEF,IAAIO,QAAQ,CAACO,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCX,gBAAgB,CAACU,IAAI,CAACE,OAAO,CAAC;MAChC,CAAC,MAAM;QACL,MAAMC,SAAS,GAAG,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvCX,gBAAgB,CAAE,UAASa,SAAS,CAACC,KAAM,EAAC,CAAC;MAC/C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5Dd,gBAAgB,CAAC,qCAAqC,CAAC;IACzD;EACF,CAAC;EAED,oBACER,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAQyB,OAAO,EAAEhB,qBAAsB;MAAAe,QAAA,EAAC;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjE7B,OAAA;MAAAwB,QAAA,EAAIjB;IAAa;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV,CAAC;AAAC3B,EAAA,CArCID,qBAAqB;AAAA6B,EAAA,GAArB7B,qBAAqB;AAuC3B,eAAeA,qBAAqB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}