{"ast":null,"code":"'use strict';\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\nfunction replaceAll(str, search, replacement) {\n  search = search instanceof RegExp ? search : new RegExp(escapeRegExp(search), 'g');\n  return str.replace(search, replacement);\n}\nvar CleanGitRef = {\n  clean: function clean(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Expected a string, received: ' + value);\n    }\n    value = replaceAll(value, './', '/');\n    value = replaceAll(value, '..', '.');\n    value = replaceAll(value, ' ', '-');\n    value = replaceAll(value, /^[~^:?*\\\\\\-]/g, '');\n    value = replaceAll(value, /[~^:?*\\\\]/g, '-');\n    value = replaceAll(value, /[~^:?*\\\\\\-]$/g, '');\n    value = replaceAll(value, '@{', '-');\n    value = replaceAll(value, /\\.$/g, '');\n    value = replaceAll(value, /\\/$/g, '');\n    value = replaceAll(value, /\\.lock$/g, '');\n    return value;\n  }\n};\nmodule.exports = CleanGitRef;","map":{"version":3,"names":["escapeRegExp","string","replace","replaceAll","str","search","replacement","RegExp","CleanGitRef","clean","value","Error","module","exports"],"sources":["C:/Users/HarshitSrivastava/Desktop/Practice/React/Project2/my-app/node_modules/clean-git-ref/lib/index.js"],"sourcesContent":["'use strict';\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction replaceAll(str, search, replacement) {\n  search = search instanceof RegExp ? search : new RegExp(escapeRegExp(search), 'g');\n\n  return str.replace(search, replacement);\n}\n\nvar CleanGitRef = {\n  clean: function clean(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Expected a string, received: ' + value);\n    }\n\n    value = replaceAll(value, './', '/');\n    value = replaceAll(value, '..', '.');\n    value = replaceAll(value, ' ', '-');\n    value = replaceAll(value, /^[~^:?*\\\\\\-]/g, '');\n    value = replaceAll(value, /[~^:?*\\\\]/g, '-');\n    value = replaceAll(value, /[~^:?*\\\\\\-]$/g, '');\n    value = replaceAll(value, '@{', '-');\n    value = replaceAll(value, /\\.$/g, '');\n    value = replaceAll(value, /\\/$/g, '');\n    value = replaceAll(value, /\\.lock$/g, '');\n    return value;\n  }\n};\n\nmodule.exports = CleanGitRef;"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,YAAYA,CAACC,MAAM,EAAE;EAC5B,OAAOA,MAAM,CAACC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC,CAAC;AACxD;AAEA,SAASC,UAAUA,CAACC,GAAG,EAAEC,MAAM,EAAEC,WAAW,EAAE;EAC5CD,MAAM,GAAGA,MAAM,YAAYE,MAAM,GAAGF,MAAM,GAAG,IAAIE,MAAM,CAACP,YAAY,CAACK,MAAM,CAAC,EAAE,GAAG,CAAC;EAElF,OAAOD,GAAG,CAACF,OAAO,CAACG,MAAM,EAAEC,WAAW,CAAC;AACzC;AAEA,IAAIE,WAAW,GAAG;EAChBC,KAAK,EAAE,SAASA,KAAKA,CAACC,KAAK,EAAE;IAC3B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAAC,+BAA+B,GAAGD,KAAK,CAAC;IAC1D;IAEAA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC;IACpCA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC;IACpCA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;IACnCA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,eAAe,EAAE,EAAE,CAAC;IAC9CA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,YAAY,EAAE,GAAG,CAAC;IAC5CA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,eAAe,EAAE,EAAE,CAAC;IAC9CA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC;IACpCA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC;IACrCA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC;IACrCA,KAAK,GAAGP,UAAU,CAACO,KAAK,EAAE,UAAU,EAAE,EAAE,CAAC;IACzC,OAAOA,KAAK;EACd;AACF,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGL,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}